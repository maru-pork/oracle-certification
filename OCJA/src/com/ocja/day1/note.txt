https://www.quora.com/How-can-I-export-the-project-in-Eclipse-to-a-GitHub-repository

******

The order of initialization of a class is:
1. All static constants, variables and blocks.(Among themselves the order is the order in which they appear in the code.)
2. All non static constants, variables and blocks.(Among themselves the order is the order in which they appear in the code.)
3. Constructor.

******

However, remember that, in Java, every call is pass by value

The official exam objectives now explicitly mention Garbage collection. All you need to know is:
1. An object can be made eligible for garbage collection by making sure there are no references pointing to that object.
2. You cannot directly invoke the garbage collector. You can suggest the JVM to perform garbage collection by calling System.gc();

******

Static import
1) Only a type can be imported. com.staticimport.foo resolves to a package

com.staticimport.foo.X; -- not valid

******

A valid declaration of "the" main() method must be public and static, should return void, and should take a single array of Strings.  
The order of the static and public keywords is irrelevant. 
But the return type should always come just before the method name.  
Applying final to the method does not change the method signature.  
In some versions of JDK, even a private or protected main() method works from command line. 
However, for the purpose of Java Certification exam, 
	it should be assumed that for the JVM to execute a class using the standard main method, the accessibility of the main method must be public.

1 static void main(String[] args) { // valid  but no run as 
2 public static void main(String[] args) { // valid
3 static public void main(String[] args) { // valid
4 final public static void main(String[] args) { // valid
5 final static public void main(String[] args) { // valid

******

A public class must exist in a file by the same name. 
So this code is invalid because anotherone is a public class but the name of the file is main. 
It would have been valid if the name of the file were anotherone.java.

A non public class may exist in any file. This implies that there can be only one public class in a file.
